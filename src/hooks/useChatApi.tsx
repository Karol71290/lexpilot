
import { useState } from "react";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { useAISettings } from "@/hooks/useAISettings";

export type ChatMessage = {
  role: "system" | "user" | "assistant";
  content: string;
};

interface ChatOptions {
  temperature?: number;
  maxTokens?: number;
  stream?: boolean;
}

export function useChatApi() {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { toast } = useToast();
  const { selectedModel } = useAISettings();

  const sendChatRequest = async (messages: ChatMessage[], options: ChatOptions = {}) => {
    setIsLoading(true);
    setError(null);
    
    try {
      // Use the model from settings, or default to gpt-4
      const model = selectedModel || "gpt-4";
      
      console.log("Sending chat request with messages:", messages);
      console.log("Using model:", model);
      
      const response = await supabase.functions.invoke("chat-completions", {
        body: {
          messages,
          model,
          temperature: options.temperature || 0.7,
          maxTokens: options.maxTokens || 800,
          stream: options.stream || false
        },
      });

      if (response.error) {
        const errorMessage = response.error.message || "Failed to generate response";
        console.error("Error calling OpenAI API:", response.error);
        setError(errorMessage);
        
        toast({
          title: "Chat Error",
          description: "There was an issue connecting to the OpenAI service. Please check if the OpenAI API key is configured properly.",
          variant: "destructive"
        });
        
        return null;
      }

      if (!response.data || !response.data.message) {
        throw new Error("No response was generated by the API");
      }

      return response.data.message as ChatMessage;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : "Unknown error occurred";
      console.error("Exception in sendChatRequest:", errorMessage);
      setError(errorMessage);
      
      toast({
        title: "Connection Error",
        description: "Failed to connect to the AI service. Please make sure the OpenAI API key is configured properly.",
        variant: "destructive"
      });
      
      return null;
    } finally {
      setIsLoading(false);
    }
  };

  return {
    sendChatRequest,
    isLoading,
    error,
  };
}
