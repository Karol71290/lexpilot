
import { useState } from "react";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";

interface OpenAIOptions {
  model?: string;
  temperature?: number;
  maxTokens?: number;
}

export function useOpenAiApi() {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { toast } = useToast();

  const generateWithOpenAI = async (prompt: string, options: OpenAIOptions = {}) => {
    setIsLoading(true);
    setError(null);
    
    try {
      // Default to GPT-4 model
      const model = options.model || "gpt-4";
      
      // Wrap Supabase API call in try-catch to handle edge function errors properly
      let response;
      try {
        console.log("Calling OpenAI with prompt:", prompt.substring(0, 50) + "...");
        console.log("Using model:", model);
        
        response = await supabase.functions.invoke("openai-prompt", {
          body: {
            prompt,
            model: model,
            temperature: options.temperature || 0.7,
            maxTokens: options.maxTokens || 800
          },
        });
      } catch (e) {
        console.error("Edge function error:", e);
        throw new Error(`Failed to call OpenAI API: ${e instanceof Error ? e.message : "Unknown error"}`);
      }

      if (response.error) {
        const errorMessage = response.error.message || "Failed to generate response";
        console.error("Error calling OpenAI API:", response.error);
        setError(errorMessage);
        
        // Show a more user-friendly toast message
        toast({
          title: "AI Service Error",
          description: "There was an issue connecting to the OpenAI service.",
          variant: "destructive"
        });
        
        return null;
      }

      if (!response.data || !response.data.generatedText) {
        throw new Error("No text was generated by the API");
      }

      return response.data.generatedText;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : "Unknown error occurred";
      console.error("Exception in generateWithOpenAI:", errorMessage);
      setError(errorMessage);
      
      // Show toast for unexpected errors
      toast({
        title: "Connection Error",
        description: "Failed to connect to the AI service.",
        variant: "destructive"
      });
      
      return null;
    } finally {
      setIsLoading(false);
    }
  };

  return {
    generateWithOpenAI,
    isLoading,
    error,
  };
}
